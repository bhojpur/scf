// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package quote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FreightQuoterClient is the client API for FreightQuoter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreightQuoterClient interface {
	MountPackage(ctx context.Context, in *ToPackage, opts ...grpc.CallOption) (*Package, error)
	Quote(ctx context.Context, in *Quotation, opts ...grpc.CallOption) (*Delivery, error)
}

type freightQuoterClient struct {
	cc grpc.ClientConnInterface
}

func NewFreightQuoterClient(cc grpc.ClientConnInterface) FreightQuoterClient {
	return &freightQuoterClient{cc}
}

func (c *freightQuoterClient) MountPackage(ctx context.Context, in *ToPackage, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/v1.quote.FreightQuoter/MountPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freightQuoterClient) Quote(ctx context.Context, in *Quotation, opts ...grpc.CallOption) (*Delivery, error) {
	out := new(Delivery)
	err := c.cc.Invoke(ctx, "/v1.quote.FreightQuoter/Quote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreightQuoterServer is the server API for FreightQuoter service.
// All implementations must embed UnimplementedFreightQuoterServer
// for forward compatibility
type FreightQuoterServer interface {
	MountPackage(context.Context, *ToPackage) (*Package, error)
	Quote(context.Context, *Quotation) (*Delivery, error)
	mustEmbedUnimplementedFreightQuoterServer()
}

// UnimplementedFreightQuoterServer must be embedded to have forward compatible implementations.
type UnimplementedFreightQuoterServer struct {
}

func (UnimplementedFreightQuoterServer) MountPackage(context.Context, *ToPackage) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountPackage not implemented")
}
func (UnimplementedFreightQuoterServer) Quote(context.Context, *Quotation) (*Delivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quote not implemented")
}
func (UnimplementedFreightQuoterServer) mustEmbedUnimplementedFreightQuoterServer() {}

// UnsafeFreightQuoterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreightQuoterServer will
// result in compilation errors.
type UnsafeFreightQuoterServer interface {
	mustEmbedUnimplementedFreightQuoterServer()
}

func RegisterFreightQuoterServer(s grpc.ServiceRegistrar, srv FreightQuoterServer) {
	s.RegisterService(&FreightQuoter_ServiceDesc, srv)
}

func _FreightQuoter_MountPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightQuoterServer).MountPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.quote.FreightQuoter/MountPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightQuoterServer).MountPackage(ctx, req.(*ToPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreightQuoter_Quote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Quotation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightQuoterServer).Quote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.quote.FreightQuoter/Quote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightQuoterServer).Quote(ctx, req.(*Quotation))
	}
	return interceptor(ctx, in, info, handler)
}

// FreightQuoter_ServiceDesc is the grpc.ServiceDesc for FreightQuoter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreightQuoter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.quote.FreightQuoter",
	HandlerType: (*FreightQuoterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MountPackage",
			Handler:    _FreightQuoter_MountPackage_Handler,
		},
		{
			MethodName: "Quote",
			Handler:    _FreightQuoter_Quote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/quote/freight_quoter.proto",
}
